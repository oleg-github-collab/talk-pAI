// –ë–ï–ó–ü–ï–ß–ù–Ü –ì–õ–û–ë–ê–õ–¨–ù–Ü –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–Ü–á
console.log('üöÄ Auth functions loading...');

// –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
window.showRegister = function showRegister() {
  console.log('üîÑ Switching to register form');
  const loginForm = document.getElementById('loginForm');
  const registerForm = document.getElementById('registerForm');
  if (loginForm) loginForm.style.display = 'none';
  if (registerForm) registerForm.style.display = 'flex';
};

window.showLogin = function showLogin() {
  console.log('üîÑ Switching to login form');
  const loginForm = document.getElementById('loginForm');
  const registerForm = document.getElementById('registerForm');
  if (registerForm) registerForm.style.display = 'none';
  if (loginForm) loginForm.style.display = 'flex';
};

window.login = async function login() {
  console.log('üîê Login function called');
  const nickname = document.getElementById('loginNickname')?.value?.trim();
  const password = document.getElementById('loginPassword')?.value;

  if (!nickname || !password) {
    alert('–í–≤–µ–¥—ñ—Ç—å nickname —Ç–∞ password');
    return;
  }

  try {
    const response = await fetch('/api/auth/login', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ nickname, password })
    });

    const data = await response.json();
    if (data.success) {
      console.log('‚úÖ Login successful, redirecting...');
      localStorage.setItem('token', data.token);
      localStorage.setItem('nickname', data.nickname);
      localStorage.setItem('avatar', data.avatar || 'üë§');

      // –ü–æ–∫–∞–∑–∞—Ç–∏ —á–∞—Ç
      showChatAfterLogin();

      // Backup: reload if redirect fails
      setTimeout(() => location.reload(), 1000);
    } else {
      alert('–ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É: ' + data.error);
    }
  } catch (error) {
    alert('–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è: ' + error.message);
  }
};

window.register = async function register() {
  console.log('üìù Register function called');
  const nickname = document.getElementById('regNickname')?.value?.trim();
  const password = document.getElementById('regPassword')?.value;

  if (!nickname || !password) {
    alert('–í–≤–µ–¥—ñ—Ç—å nickname —Ç–∞ password');
    return;
  }

  if (nickname.length < 3) {
    alert('Nickname –º–∞—î –±—É—Ç–∏ –º—ñ–Ω—ñ–º—É–º 3 —Å–∏–º–≤–æ–ª–∏');
    return;
  }

  if (password.length < 6) {
    alert('Password –º–∞—î –±—É—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤');
    return;
  }

  try {
    const response = await fetch('/api/auth/register', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ nickname, password })
    });

    const data = await response.json();
    if (data.success) {
      console.log('‚úÖ Registration successful, redirecting...');
      localStorage.setItem('token', data.token || data.user?.token);
      localStorage.setItem('nickname', data.nickname || data.user?.nickname);
      localStorage.setItem('avatar', data.avatar || data.user?.avatar || 'üë§');

      // –ü–æ–∫–∞–∑–∞—Ç–∏ —á–∞—Ç
      showChatAfterLogin();

      // Backup: reload if redirect fails
      setTimeout(() => location.reload(), 1000);
    } else {
      alert('–ü–æ–º–∏–ª–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó: ' + data.error);
    }
  } catch (error) {
    alert('–ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è: ' + error.message);
  }
};

// –§—É–Ω–∫—Ü—ñ—è –ø–æ–∫–∞–∑—É —á–∞—Ç—É –ø—ñ—Å–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
window.showChatAfterLogin = function() {
  console.log('üîÑ Switching to chat screen...');

  // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ auth screen
  const authScreen = document.getElementById('authScreen');
  if (authScreen) {
    authScreen.style.display = 'none';
    authScreen.classList.remove('active');
  }

  // –ü–æ–∫–∞–∑–∞—Ç–∏ chat screen
  const chatScreen = document.getElementById('chatListScreen') || document.getElementById('chatScreen');
  if (chatScreen) {
    chatScreen.style.display = 'flex';
    chatScreen.classList.add('active');
  }

  // Backup: –∑–Ω–∞–π—Ç–∏ –ø–µ—Ä—à–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π –µ–∫—Ä–∞–Ω —á–∞—Ç—É
  const screens = ['chatListScreen', 'chatScreen', 'desktopLayout'];
  for (const screenId of screens) {
    const screen = document.getElementById(screenId);
    if (screen) {
      screen.style.display = 'flex';
      screen.classList.add('active');
      break;
    }
  }
};

console.log('‚úÖ All auth functions loaded successfully');